
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class JSONParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public JSONParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public JSONParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JSONParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\022\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\004\004\000\002\004\005\000\002\005\003\000\002" +
    "\005\005\000\002\006\005\000\002\007\004\000\002\007" +
    "\005\000\002\010\003\000\002\010\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\020\004\016\006\004\012\005\013\013\014" +
    "\007\015\010\016\011\001\002\000\022\004\016\006\004" +
    "\007\033\012\005\013\013\014\007\015\010\016\011\001" +
    "\002\000\012\002\ufffb\005\ufffb\007\ufffb\011\ufffb\001\002" +
    "\000\012\002\ufffd\005\ufffd\007\ufffd\011\ufffd\001\002\000" +
    "\012\002\ufff9\005\ufff9\007\ufff9\011\ufff9\001\002\000\012" +
    "\002\uffff\005\uffff\007\uffff\011\uffff\001\002\000\012\002" +
    "\ufffe\005\ufffe\007\ufffe\011\ufffe\001\002\000\012\002\ufffc" +
    "\005\ufffc\007\ufffc\011\ufffc\001\002\000\012\002\ufffa\005" +
    "\ufffa\007\ufffa\011\ufffa\001\002\000\004\002\001\001\002" +
    "\000\004\002\030\001\002\000\006\005\021\015\020\001" +
    "\002\000\006\005\025\011\026\001\002\000\004\010\023" +
    "\001\002\000\012\002\ufff8\005\ufff8\007\ufff8\011\ufff8\001" +
    "\002\000\006\005\ufff6\011\ufff6\001\002\000\020\004\016" +
    "\006\004\012\005\013\013\014\007\015\010\016\011\001" +
    "\002\000\006\005\ufff4\011\ufff4\001\002\000\012\002\ufff7" +
    "\005\ufff7\007\ufff7\011\ufff7\001\002\000\004\015\020\001" +
    "\002\000\006\005\ufff5\011\ufff5\001\002\000\004\002\000" +
    "\001\002\000\006\007\034\011\035\001\002\000\006\007" +
    "\ufff1\011\ufff1\001\002\000\012\002\ufff3\005\ufff3\007\ufff3" +
    "\011\ufff3\001\002\000\012\002\ufff2\005\ufff2\007\ufff2\011" +
    "\ufff2\001\002\000\020\004\016\006\004\012\005\013\013" +
    "\014\007\015\010\016\011\001\002\000\006\007\ufff0\011" +
    "\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\012\002\014\003\013\004\005\007\011\001" +
    "\001\000\012\003\031\004\005\007\011\010\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\016\006\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\023\004" +
    "\005\007\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\035\004\005\007\011\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JSONParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JSONParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JSONParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public static void main(String[] args) throws Exception {
    if (args.length == 0) {
      System.err.println("Uso: java JSONParser <arquivo_json>");
      return;
    }
    try {
      JSONLexer lexer = new JSONLexer(new java.io.FileReader(args[0]));
      JSONParser parser = new JSONParser(lexer);
      Object result = parser.parse().value;
      System.out.println("JSON válido!");
      // Opcional: imprimir o resultado da análise se você construir uma AST
      // System.out.println("Resultado da análise: " + result);
    } catch (Exception e) {
      System.err.println("Erro ao analisar JSON: " + e.getMessage());
      e.printStackTrace();
    }
  }

  // Método para reportar erros de sintaxe
  public void syntax_error(Symbol cur_token) {
    System.err.println("Erro de sintaxe na linha " + (cur_token.left + 1) + ", coluna " + (cur_token.right + 1) + ". Token inesperado: '" + cur_token.value + "'");
  }

  // Método para reportar erros fatais
  public void report_fatal_error(String message, Object info) {
    System.err.println("Erro fatal: " + message);
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$JSONParser$actions {
  private final JSONParser parser;

  /** Constructor */
  CUP$JSONParser$actions(JSONParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$JSONParser$do_action_part00000000(
    int                        CUP$JSONParser$act_num,
    java_cup.runtime.lr_parser CUP$JSONParser$parser,
    java.util.Stack            CUP$JSONParser$stack,
    int                        CUP$JSONParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JSONParser$result;

      /* select the action based on the action number */
      switch (CUP$JSONParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // json ::= value 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("json",0, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= json EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).value;
		RESULT = start_val;
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JSONParser$parser.done_parsing();
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // value ::= STRING 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("value",1, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // value ::= NUMERO 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("value",1, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // value ::= object 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("value",1, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // value ::= array 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("value",1, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // value ::= TRUE 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("value",1, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // value ::= FALSE 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("value",1, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // value ::= NULL 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("value",1, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // object ::= LCHAVE RCHAVE 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("object",2, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // object ::= LCHAVE members RCHAVE 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("object",2, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // members ::= pair 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("members",3, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // members ::= members VIRGULA pair 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("members",3, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // pair ::= STRING DPONTO value 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("pair",4, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // array ::= LCOLCH RCOLCH 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("array",5, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // array ::= LCOLCH elements RCOLCH 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("array",5, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // elements ::= value 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("elements",6, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // elements ::= elements VIRGULA value 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("elements",6, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$JSONParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$JSONParser$do_action(
    int                        CUP$JSONParser$act_num,
    java_cup.runtime.lr_parser CUP$JSONParser$parser,
    java.util.Stack            CUP$JSONParser$stack,
    int                        CUP$JSONParser$top)
    throws java.lang.Exception
    {
              return CUP$JSONParser$do_action_part00000000(
                               CUP$JSONParser$act_num,
                               CUP$JSONParser$parser,
                               CUP$JSONParser$stack,
                               CUP$JSONParser$top);
    }
}

}
