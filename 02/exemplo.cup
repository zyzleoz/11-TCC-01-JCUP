import java_cup.runtime.Symbol;

parser code {:
  public static void main(String[] args) throws Exception {
    if (args.length == 0) {
      System.err.println("Uso: java MeuParser <arquivo.json>");
      return;
    }

    try {
      MeuScanner scanner = new MeuScanner(new java.io.FileReader(args[0]));
      MeuParser parser = new MeuParser(scanner);
      parser.parse();
      System.out.println("JSON válido!");
    } catch (Exception e) {
      System.err.println("Erro ao analisar o JSON: " + e.getMessage());
      e.printStackTrace();
    }
  }

  // Exibe erros de sintaxe
  public void syntax_error(Symbol cur_token) {
    System.err.println("Erro de sintaxe na linha " + (cur_token.left + 1) + 
                       ", coluna " + (cur_token.right + 1) + 
                       ". Token inesperado: '" + cur_token.value + "'");
  }

  // Exibe erros fatais
  public void report_fatal_error(String message, Object info) {
    System.err.println("Erro fatal: " + message);
  }
:};

/* Declaração dos tokens que o scanner reconhece */
terminal LCHAVE, RCHAVE, LCOLCH, RCOLCH, DPONTO, VIRGULA;
terminal TRUE, FALSE, NULL;
terminal String STRING;
terminal Double NUMERO;

/* Não-terminais (estrutura da gramática JSON) */
non terminal json, value, object, members, pair, array, elements;

/* Regra inicial */
start with json;

/* Regras gramaticais */
json ::= value;

value ::= STRING
        | NUMERO
        | object
        | array
        | TRUE
        | FALSE
        | NULL;

object ::= LCHAVE RCHAVE // Objeto vazio
         | LCHAVE members RCHAVE;

members ::= pair
          | members VIRGULA pair;

pair ::= STRING DPONTO value;

array ::= LCOLCH RCOLCH // Array vazio
        | LCOLCH elements RCOLCH;

elements ::= value
           | elements VIRGULA value;
